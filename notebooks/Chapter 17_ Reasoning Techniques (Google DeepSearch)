{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOPjhfqajHJ7uH2aJEa8Hae"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"QMUWyDSjx-VH"},"outputs":[],"source":["# Create our Agent Graph\n","builder = StateGraph(OverallState, config_schema=Configuration)\n","\n","# Define the nodes we will cycle between\n","builder.add_node(\"generate_query\", generate_query)\n","builder.add_node(\"web_research\", web_research)\n","builder.add_node(\"reflection\", reflection)\n","builder.add_node(\"finalize_answer\", finalize_answer)\n","\n","# Set the entrypoint as `generate_query`\n","# This means that this node is the first one called\n","builder.add_edge(START, \"generate_query\")\n","# Add conditional edge to continue with search queries in a parallel branch\n","builder.add_conditional_edges(\n","    \"generate_query\", continue_to_web_research, [\"web_research\"]\n",")\n","# Reflect on the web research\n","builder.add_edge(\"web_research\", \"reflection\")\n","# Evaluate the research\n","builder.add_conditional_edges(\n","    \"reflection\", evaluate_research, [\"web_research\", \"finalize_answer\"]\n",")\n","# Finalize the answer\n","builder.add_edge(\"finalize_answer\", END)\n","\n","graph = builder.compile(name=\"pro-search-agent\")"]}]}