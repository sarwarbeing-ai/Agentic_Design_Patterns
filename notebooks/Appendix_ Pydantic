{"cells":[{"cell_type":"code","source":["from pydantic import BaseModel, EmailStr, Field, ValidationError\n","from typing import List, Optional\n","from datetime import date\n","\n","# --- Pydantic Model Definition (from above) ---\n","class User(BaseModel):\n","    name: str = Field(..., description=\"The full name of the user.\")\n","    email: EmailStr = Field(..., description=\"The user's email address.\")\n","    date_of_birth: Optional[date] = Field(None, description=\"The user's date of birth.\")\n","    interests: List[str] = Field(default_factory=list, description=\"A list of the user's interests.\")\n","\n","# --- Hypothetical LLM Output ---\n","llm_output_json = \"\"\"\n","{\n","    \"name\": \"Alice Wonderland\",\n","    \"email\": \"alice.w@example.com\",\n","    \"date_of_birth\": \"1995-07-21\",\n","    \"interests\": [\n","        \"Natural Language Processing\",\n","        \"Python Programming\",\n","        \"Gardening\"\n","    ]\n","}\n","\"\"\"\n","\n","# --- Parsing and Validation ---\n","try:\n","    # Use the model_validate_json class method to parse the JSON string.\n","    # This single step parses the JSON and validates the data against the User model.\n","    user_object = User.model_validate_json(llm_output_json)\n","\n","    # Now you can work with a clean, type-safe Python object.\n","    print(\"Successfully created User object!\")\n","    print(f\"Name: {user_object.name}\")\n","    print(f\"Email: {user_object.email}\")\n","    print(f\"Date of Birth: {user_object.date_of_birth}\")\n","    print(f\"First Interest: {user_object.interests[0]}\")\n","\n","    # You can access the data like any other Python object attribute.\n","    # Pydantic has already converted the 'date_of_birth' string to a datetime.date object.\n","    print(f\"Type of date_of_birth: {type(user_object.date_of_birth)}\")\n","\n","except ValidationError as e:\n","    # If the JSON is malformed or the data doesn't match the model's types,\n","    # Pydantic will raise a ValidationError.\n","    print(\"Failed to validate JSON from LLM.\")\n","    print(e)"],"outputs":[],"execution_count":null,"metadata":{"id":"NhfdOggSqMrH"}}],"metadata":{"colab":{"provenance":[{"file_id":"15XCzDOvBhIQaZ__xkvruf5sP9OznAbK9","timestamp":1749895601577}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}