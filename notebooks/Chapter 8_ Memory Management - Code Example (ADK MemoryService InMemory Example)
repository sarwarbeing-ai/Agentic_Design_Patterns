{"cells":[{"cell_type":"code","source":["# Example: Using InMemoryMemoryService\n","# This is suitable for local development and testing where data persistence\n","# across application restarts is not required. Memory content is lost when the app stops.\n","from google.adk.memory import InMemoryMemoryService\n","memory_service = InMemoryMemoryService()"],"outputs":[],"execution_count":null,"metadata":{"id":"omZJl_MGUuLe"}},{"cell_type":"code","source":["# Example: Using VertexAiRagMemoryService\n","# This is suitable for scalable production on Google Cloud Platform, leveraging\n","# Vertex AI RAG (Retrieval Augmented Generation) for persistent, searchable memory.\n","# Requires: pip install google-adk[vertexai], GCP setup/authentication, and a Vertex AI RAG Corpus.\n","from google.adk.memory import VertexAiRagMemoryService\n","\n","# The resource name of your Vertex AI RAG Corpus\n","RAG_CORPUS_RESOURCE_NAME = \"projects/your-gcp-project-id/locations/us-central1/ragCorpora/your-corpus-id\" # Replace with your Corpus resource name\n","\n","# Optional configuration for retrieval behavior\n","SIMILARITY_TOP_K = 5 # Number of top results to retrieve\n","VECTOR_DISTANCE_THRESHOLD = 0.7 # Threshold for vector similarity\n","\n","memory_service = VertexAiRagMemoryService(\n","    rag_corpus=RAG_CORPUS_RESOURCE_NAME,\n","    similarity_top_k=SIMILARITY_TOP_K,\n","    vector_distance_threshold=VECTOR_DISTANCE_THRESHOLD\n",")\n","# When using this service, methods like add_session_to_memory and search_memory\n","# will interact with the specified Vertex AI RAG Corpus."],"outputs":[],"execution_count":null,"metadata":{"id":"1eW9pTsLUuLg"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}