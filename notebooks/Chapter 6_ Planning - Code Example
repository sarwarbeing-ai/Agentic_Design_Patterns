{"cells":[{"cell_type":"code","source":["import os\n","from dotenv import load_dotenv\n","from crewai import Agent, Task, Crew, Process\n","from langchain_openai import ChatOpenAI\n","\n","# Load environment variables from .env file for security\n","load_dotenv()\n","\n","# 1. Explicitly define the language model for clarity\n","llm = ChatOpenAI(model=\"gpt-4-turbo\")\n","\n","# 2. Define a clear and focused agent\n","planner_writer_agent = Agent(\n","    role='Article Planner and Writer',\n","    goal='Plan and then write a concise, engaging summary on a specified topic.',\n","    backstory=(\n","        'You are an expert technical writer and content strategist. '\n","        'Your strength lies in creating a clear, actionable plan before writing, '\n","        'ensuring the final summary is both informative and easy to digest.'\n","    ),\n","    verbose=True,\n","    allow_delegation=False,\n","    llm=llm # Assign the specific LLM to the agent\n",")\n","\n","# 3. Define a task with a more structured and specific expected output\n","topic = \"The importance of Reinforcement Learning in AI\"\n","high_level_task = Task(\n","    description=(\n","        f\"1. Create a bullet-point plan for a summary on the topic: '{topic}'.\\n\"\n","        f\"2. Write the summary based on your plan, keeping it around 200 words.\"\n","    ),\n","    expected_output=(\n","        \"A final report containing two distinct sections:\\n\\n\"\n","        \"### Plan\\n\"\n","        \"- A bulleted list outlining the main points of the summary.\\n\\n\"\n","        \"### Summary\\n\"\n","        \"- A concise and well-structured summary of the topic.\"\n","    ),\n","    agent=planner_writer_agent,\n",")\n","\n","# Create the crew with a clear process\n","crew = Crew(\n","    agents=[planner_writer_agent],\n","    tasks=[high_level_task],\n","    process=Process.sequential,\n",")\n","\n","# Execute the task\n","print(\"## Running the planning and writing task ##\")\n","result = crew.kickoff()\n","\n","print(\"\\n\\n---\\n## Task Result ##\\n---\")\n","print(result)"],"outputs":[],"execution_count":null,"metadata":{"id":"LaUjXoj0Aax5"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}