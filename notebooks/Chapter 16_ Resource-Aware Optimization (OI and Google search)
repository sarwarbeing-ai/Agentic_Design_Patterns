{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMpABRW5rHcNgEz0HNBRrf0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"iLaZHFITu534"},"outputs":[],"source":["import os\n","import requests\n","import json\n","from dotenv import load_dotenv\n","from openai import OpenAI\n","\n","\n","# Load environment variables\n","load_dotenv()\n","OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n","GOOGLE_CUSTOM_SEARCH_API_KEY = os.getenv(\"GOOGLE_CUSTOM_SEARCH_API_KEY\")\n","GOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\n","\n","if not OPENAI_API_KEY or not GOOGLE_CUSTOM_SEARCH_API_KEY or not GOOGLE_CSE_ID:\n","    raise ValueError(\n","        \"Please set OPENAI_API_KEY, GOOGLE_CUSTOM_SEARCH_API_KEY, and GOOGLE_CSE_ID in your .env file.\"\n","    )\n","\n","client = OpenAI(api_key=OPENAI_API_KEY)\n","\n","\n","# --- Step 1: Classify the Prompt ---\n","def classify_prompt(prompt: str) -> dict:\n","    system_message = {\n","        \"role\": \"system\",\n","        \"content\": (\n","            \"You are a classifier that analyzes user prompts and returns one of three categories ONLY:\\n\\n\"\n","            \"- simple\\n\"\n","            \"- reasoning\\n\"\n","            \"- internet_search\\n\\n\"\n","            \"Rules:\\n\"\n","            \"- Use 'simple' for direct factual questions that need no reasoning or current events.\\n\"\n","            \"- Use 'reasoning' for logic, math, or multi-step inference questions.\\n\"\n","            \"- Use 'internet_search' if the prompt refers to current events, recent data, or things not in your training data.\\n\\n\"\n","            \"Respond ONLY with JSON like:\\n\"\n","            '{ \"classification\": \"simple\" }'\n","        ),\n","    }\n","\n","    user_message = {\"role\": \"user\", \"content\": prompt}\n","\n","    response = client.chat.completions.create(\n","        model=\"gpt-4o\", messages=[system_message, user_message], temperature=1\n","    )\n","\n","    reply = response.choices[0].message.content\n","    return json.loads(reply)\n","\n","\n","# --- Step 2: Google Search ---\n","def google_search(query: str, num_results=1) -> list:\n","    url = \"https://www.googleapis.com/customsearch/v1\"\n","    params = {\n","        \"key\": GOOGLE_CUSTOM_SEARCH_API_KEY,\n","        \"cx\": GOOGLE_CSE_ID,\n","        \"q\": query,\n","        \"num\": num_results,\n","    }\n","\n","    try:\n","        response = requests.get(url, params=params)\n","        response.raise_for_status()\n","        results = response.json()\n","\n","        if \"items\" in results and results[\"items\"]:\n","            return [\n","                {\n","                    \"title\": item.get(\"title\"),\n","                    \"snippet\": item.get(\"snippet\"),\n","                    \"link\": item.get(\"link\"),\n","                }\n","                for item in results[\"items\"]\n","            ]\n","        else:\n","            return []\n","    except requests.exceptions.RequestException as e:\n","        return {\"error\": str(e)}\n","\n","\n","# --- Step 3: Generate Response ---\n","def generate_response(prompt: str, classification: str, search_results=None) -> str:\n","    if classification == \"simple\":\n","        model = \"gpt-4o-mini\"\n","        full_prompt = prompt\n","    elif classification == \"reasoning\":\n","        model = \"o4-mini\"\n","        full_prompt = prompt\n","    elif classification == \"internet_search\":\n","        model = \"gpt-4o\"\n","        # Convert each search result dict to a readable string\n","        if search_results:\n","            search_context = \"\\n\".join(\n","                [\n","                    f\"Title: {item.get('title')}\\nSnippet: {item.get('snippet')}\\nLink: {item.get('link')}\"\n","                    for item in search_results\n","                ]\n","            )\n","        else:\n","            search_context = \"No search results found.\"\n","        full_prompt = f\"\"\"Use the following web results to answer the user query:\n","\n","{search_context}\n","\n","Query: {prompt}\"\"\"\n","\n","    response = client.chat.completions.create(\n","        model=model,\n","        messages=[{\"role\": \"user\", \"content\": full_prompt}],\n","        temperature=1,\n","    )\n","\n","    return response.choices[0].message.content, model\n","\n","\n","# --- Step 4: Combined Router ---\n","def handle_prompt(prompt: str) -> dict:\n","    classification_result = classify_prompt(prompt)\n","    # Remove or comment out the next line to avoid duplicate printing\n","    # print(\"\\n🔍 Classification Result:\", classification_result)\n","    classification = classification_result[\"classification\"]\n","\n","    search_results = None\n","    if classification == \"internet_search\":\n","        search_results = google_search(prompt)\n","        # print(\"\\n🔍 Search Results:\", search_results)\n","\n","    answer, model = generate_response(prompt, classification, search_results)\n","    return {\"classification\": classification, \"response\": answer, \"model\": model}\n","test_prompt = \"What is the capital of Australia?\"\n","# test_prompt = \"Explain the impact of quantum computing on cryptography.\"\n","# test_prompt = \"When does the Australian Open 2026 start, give me full date?\"\n","\n","result = handle_prompt(test_prompt)\n","print(\"🔍 Classification:\", result[\"classification\"])\n","print(\"🧠 Model Used:\", result[\"model\"])\n","print(\"🧠 Response:\\n\", result[\"response\"])\n","#🔍 Classification: simple\n","#🧠 Model Used: gpt-4o-mini\n","#🧠 Response:\n","# The capital of Australia is Canberra."]}]}