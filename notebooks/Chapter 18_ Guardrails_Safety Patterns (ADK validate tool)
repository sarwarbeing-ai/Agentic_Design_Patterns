{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMDucqE4RbymLF9VrLbcPGl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"QMUWyDSjx-VH"},"outputs":[],"source":["from google.adk.agents import Agent # Correct import\n","from google.adk.tools.base_tool import BaseTool\n","from google.adk.tools.tool_context import ToolContext\n","from typing import Optional, Dict, Any\n","\n","def validate_tool_params(\n","    tool: BaseTool,\n","    args: Dict[str, Any],\n","    tool_context: ToolContext # Correct signature, removed CallbackContext\n","    ) -> Optional[Dict]:\n","    \"\"\"\n","    Validates tool arguments before execution.\n","    For example, checks if the user ID in the arguments matches the one in the session state.\n","    \"\"\"\n","    print(f\"Callback triggered for tool: {tool.name}, args: {args}\")\n","\n","    # Access state correctly through tool_context\n","    expected_user_id = tool_context.state.get(\"session_user_id\")\n","    actual_user_id_in_args = args.get(\"user_id_param\")\n","\n","    if actual_user_id_in_args and actual_user_id_in_args != expected_user_id:\n","        print(f\"Validation Failed: User ID mismatch for tool '{tool.name}'.\")\n","        # Block tool execution by returning a dictionary\n","        return {\n","            \"status\": \"error\",\n","            \"error_message\": f\"Tool call blocked: User ID validation failed for security reasons.\"\n","        }\n","\n","    # Allow tool execution to proceed\n","    print(f\"Callback validation passed for tool '{tool.name}'.\")\n","    return None\n","\n","# Agent setup using the documented class\n","root_agent = Agent( # Use the documented Agent class\n","    model='gemini-2.0-flash-exp', # Using a model name from the guide\n","    name='root_agent',\n","    instruction=\"You are a root agent that validates tool calls.\",\n","    before_tool_callback=validate_tool_params, # Assign the corrected callback\n","    tools = [\n","      # ... list of tool functions or Tool instances ...\n","    ]\n",")"]}]}