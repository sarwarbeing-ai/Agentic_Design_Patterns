{"cells":[{"cell_type":"code","source":["# pip install crewai langchain-openai\n","\n","import os\n","from crewai import Agent, Task, Crew\n","from crewai.tools import tool\n","import logging\n","\n","# --- Best Practice: Configure Logging ---\n","# A basic logging setup helps in debugging and tracking the crew's execution.\n","logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","# --- Set up your API Key ---\n","# For production, it's recommended to use a more secure method for key management\n","# like environment variables loaded at runtime or a secret manager.\n","#\n","# Set the environment variable for your chosen LLM provider (e.g., OPENAI_API_KEY)\n","# os.environ[\"OPENAI_API_KEY\"] = \"YOUR_API_KEY\"\n","# os.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o\"\n","\n","\n","# --- 1. Refactored Tool: Returns Clean Data ---\n","# The tool now returns raw data (a float) or raises a standard Python error.\n","# This makes it more reusable and forces the agent to handle outcomes properly.\n","@tool(\"Stock Price Lookup Tool\")\n","def get_stock_price(ticker: str) -> float:\n","    \"\"\"\n","    Fetches the latest simulated stock price for a given stock ticker symbol.\n","    Returns the price as a float. Raises a ValueError if the ticker is not found.\n","    \"\"\"\n","    logging.info(f\"Tool Call: get_stock_price for ticker '{ticker}'\")\n","    simulated_prices = {\n","        \"AAPL\": 178.15,\n","        \"GOOGL\": 1750.30,\n","        \"MSFT\": 425.50,\n","    }\n","    price = simulated_prices.get(ticker.upper())\n","\n","    if price is not None:\n","        return price\n","    else:\n","        # Raising a specific error is better than returning a string.\n","        # The agent is equipped to handle exceptions and can decide on the next action.\n","        raise ValueError(f\"Simulated price for ticker '{ticker.upper()}' not found.\")\n","\n","\n","# --- 2. Define the Agent ---\n","# The agent definition remains the same, but it will now leverage the improved tool.\n","financial_analyst_agent = Agent(\n","  role='Senior Financial Analyst',\n","  goal='Analyze stock data using provided tools and report key prices.',\n","  backstory=\"You are an experienced financial analyst adept at using data sources to find stock information. You provide clear, direct answers.\",\n","  verbose=True,\n","  tools=[get_stock_price],\n","  # Allowing delegation can be useful, but is not necessary for this simple task.\n","  allow_delegation=False,\n",")\n","\n","# --- 3. Refined Task: Clearer Instructions and Error Handling ---\n","# The task description is more specific and guides the agent on how to react\n","# to both successful data retrieval and potential errors.\n","analyze_aapl_task = Task(\n","  description=(\n","      \"What is the current simulated stock price for Apple (ticker: AAPL)? \"\n","      \"Use the 'Stock Price Lookup Tool' to find it. \"\n","      \"If the ticker is not found, you must report that you were unable to retrieve the price.\"\n","  ),\n","  expected_output=(\n","      \"A single, clear sentence stating the simulated stock price for AAPL. \"\n","      \"For example: 'The simulated stock price for AAPL is $178.15.' \"\n","      \"If the price cannot be found, state that clearly.\"\n","  ),\n","  agent=financial_analyst_agent,\n",")\n","\n","# --- 4. Formulate the Crew ---\n","# The crew orchestrates how the agent and task work together.\n","financial_crew = Crew(\n","  agents=[financial_analyst_agent],\n","  tasks=[analyze_aapl_task],\n","  verbose=True # Set to False for less detailed logs in production\n",")\n","\n","# --- 5. Run the Crew within a Main Execution Block ---\n","# Using a __name__ == \"__main__\": block is a standard Python best practice.\n","def main():\n","    \"\"\"Main function to run the crew.\"\"\"\n","    # Check for API key before starting to avoid runtime errors.\n","    if not os.environ.get(\"OPENAI_API_KEY\"):\n","        print(\"ERROR: The OPENAI_API_KEY environment variable is not set.\")\n","        print(\"Please set it before running the script.\")\n","        return\n","\n","    print(\"\\n## Starting the Financial Crew...\")\n","    print(\"---------------------------------\")\n","\n","    # The kickoff method starts the execution.\n","    result = financial_crew.kickoff()\n","\n","    print(\"\\n---------------------------------\")\n","    print(\"## Crew execution finished.\")\n","    print(\"\\nFinal Result:\\n\", result)\n","\n","if __name__ == \"__main__\":\n","    main()"],"outputs":[],"execution_count":null,"metadata":{"id":"59Lua_jCcMqw"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}