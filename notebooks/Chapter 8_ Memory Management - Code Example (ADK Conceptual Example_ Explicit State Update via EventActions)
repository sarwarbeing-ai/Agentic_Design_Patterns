{"cells":[{"cell_type":"code","source":["import time\n","from google.adk.tools.tool_context import ToolContext\n","from google.adk.sessions import InMemorySessionService\n","\n","# --- Define the Recommended Tool-Based Approach ---\n","def log_user_login(tool_context: ToolContext) -> dict:\n","    \"\"\"\n","    Updates the session state upon a user login event.\n","    This tool encapsulates all state changes related to a user login.\n","    Args:\n","        tool_context: Automatically provided by ADK, gives access to session state.\n","    Returns:\n","        A dictionary confirming the action was successful.\n","    \"\"\"\n","    # Access the state directly through the provided context.\n","    state = tool_context.state\n","\n","    # Get current values or defaults, then update the state.\n","    # This is much cleaner and co-locates the logic.\n","    login_count = state.get(\"user:login_count\", 0) + 1\n","    state[\"user:login_count\"] = login_count\n","    state[\"task_status\"] = \"active\"\n","    state[\"user:last_login_ts\"] = time.time()\n","    state[\"temp:validation_needed\"] = True\n","\n","    print(\"State updated from within the `log_user_login` tool.\")\n","\n","    return {\n","        \"status\": \"success\",\n","        \"message\": f\"User login tracked. Total logins: {login_count}.\"\n","    }\n","\n","# --- Demonstration of Usage ---\n","# In a real application, an LLM Agent would decide to call this tool.\n","# Here, we simulate a direct call for demonstration purposes.\n","\n","# 1. Setup\n","session_service = InMemorySessionService()\n","app_name, user_id, session_id = \"state_app_tool\", \"user3\", \"session3\"\n","session = session_service.create_session(\n","    app_name=app_name,\n","    user_id=user_id,\n","    session_id=session_id,\n","    state={\"user:login_count\": 0, \"task_status\": \"idle\"}\n",")\n","print(f\"Initial state: {session.state}\")\n","\n","# 2. Simulate a tool call (in a real app, the ADK Runner does this)\n","# We create a ToolContext manually just for this standalone example.\n","from google.adk.tools.tool_context import InvocationContext\n","mock_context = ToolContext(\n","    invocation_context=InvocationContext(\n","        app_name=app_name, user_id=user_id, session_id=session_id,\n","        session=session, session_service=session_service\n","    )\n",")\n","\n","# 3. Execute the tool\n","log_user_login(mock_context)\n","\n","# 4. Check the updated state\n","updated_session = session_service.get_session(app_name, user_id, session_id)\n","print(f\"State after tool execution: {updated_session.state}\")\n","\n","# Expected output will show the same state change as the \"Before\" case,\n","# but the code organization is significantly cleaner and more robust."],"outputs":[],"execution_count":null,"metadata":{"id":"KhIxt-_ZPRye"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}