{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-eAjTlNP1jq1bcRNhpw39hiYsuKV-8Cd","timestamp":1749136476078}],"authorship_tag":"ABX9TyOZlRoKSKtHG+mnUgOpcaUu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"QMUWyDSjx-VH"},"outputs":[],"source":["import os\n","import asyncio\n","from typing import List, Optional, Dict, Type\n","\n","from dotenv import load_dotenv\n","from pydantic import BaseModel, Field\n","\n","from langchain_core.prompts import ChatPromptTemplate\n","from langchain_core.tools import Tool\n","from langchain_openai import ChatOpenAI\n","from langchain.agents import AgentExecutor, create_react_agent\n","from langchain.memory import ConversationBufferMemory\n","\n","# --- 0. Configuration and Setup ---\n","# Loads the OPENAI_API_KEY from the .env file.\n","load_dotenv()\n","\n","# The ChatOpenAI client automatically picks up the API key from the environment.\n","llm = ChatOpenAI(temperature=0.5, model=\"gpt-4o-mini\")\n","\n","# --- 1. Task Management System ---\n","\n","class Task(BaseModel):\n","    \"\"\"Represents a single task in the system.\"\"\"\n","    id: str\n","    description: str\n","    priority: Optional[str] = None  # P0, P1, P2\n","    assigned_to: Optional[str] = None # Name of the worker\n","\n","class SuperSimpleTaskManager:\n","    \"\"\"An efficient and robust in-memory task manager.\"\"\"\n","    def __init__(self):\n","        # Use a dictionary for O(1) lookups, updates, and deletions.\n","        self.tasks: Dict[str, Task] = {}\n","        self.next_task_id = 1\n","\n","    def create_task(self, description: str) -> Task:\n","        \"\"\"Creates and stores a new task.\"\"\"\n","        task_id = f\"TASK-{self.next_task_id:03d}\"\n","        new_task = Task(id=task_id, description=description)\n","        self.tasks[task_id] = new_task\n","        self.next_task_id += 1\n","        print(f\"DEBUG: Task created - {task_id}: {description}\")\n","        return new_task\n","\n","    def update_task(self, task_id: str, **kwargs) -> Optional[Task]:\n","        \"\"\"Safely updates a task using Pydantic's model_copy.\"\"\"\n","        task = self.tasks.get(task_id)\n","        if task:\n","            # Use model_copy for type-safe updates.\n","            update_data = {k: v for k, v in kwargs.items() if v is not None}\n","            updated_task = task.model_copy(update=update_data)\n","            self.tasks[task_id] = updated_task\n","            print(f\"DEBUG: Task {task_id} updated with {update_data}\")\n","            return updated_task\n","\n","        print(f\"DEBUG: Task {task_id} not found for update.\")\n","        return None\n","\n","    def list_all_tasks(self) -> str:\n","        \"\"\"Lists all tasks currently in the system.\"\"\"\n","        if not self.tasks:\n","            return \"No tasks in the system.\"\n","\n","        task_strings = []\n","        for task in self.tasks.values():\n","            task_strings.append(\n","                f\"ID: {task.id}, Desc: '{task.description}', \"\n","                f\"Priority: {task.priority or 'N/A'}, \"\n","                f\"Assigned To: {task.assigned_to or 'N/A'}\"\n","            )\n","        return \"Current Tasks:\\n\" + \"\\n\".join(task_strings)\n","\n","task_manager = SuperSimpleTaskManager()\n","\n","# --- 2. Tools for the Project Manager Agent ---\n","\n","# Use Pydantic models for tool arguments for better validation and clarity.\n","class CreateTaskArgs(BaseModel):\n","    description: str = Field(description=\"A detailed description of the task.\")\n","\n","class PriorityArgs(BaseModel):\n","    task_id: str = Field(description=\"The ID of the task to update, e.g., 'TASK-001'.\")\n","    priority: str = Field(description=\"The priority to set. Must be one of: 'P0', 'P1', 'P2'.\")\n","\n","class AssignWorkerArgs(BaseModel):\n","    task_id: str = Field(description=\"The ID of the task to update, e.g., 'TASK-001'.\")\n","    worker_name: str = Field(description=\"The name of the worker to assign the task to.\")\n","\n","def create_new_task_tool(description: str) -> str:\n","    \"\"\"Creates a new project task with the given description.\"\"\"\n","    task = task_manager.create_task(description)\n","    return f\"Created task {task.id}: '{task.description}'.\"\n","\n","def assign_priority_to_task_tool(task_id: str, priority: str) -> str:\n","    \"\"\"Assigns a priority (P0, P1, P2) to a given task ID.\"\"\"\n","    if priority not in [\"P0\", \"P1\", \"P2\"]:\n","        return \"Invalid priority. Must be P0, P1, or P2.\"\n","    task = task_manager.update_task(task_id, priority=priority)\n","    return f\"Assigned priority {priority} to task {task.id}.\" if task else f\"Task {task_id} not found.\"\n","\n","def assign_task_to_worker_tool(task_id: str, worker_name: str) -> str:\n","    \"\"\"Assigns a task to a specific worker.\"\"\"\n","    task = task_manager.update_task(task_id, assigned_to=worker_name)\n","    return f\"Assigned task {task.id} to {worker_name}.\" if task else f\"Task {task_id} not found.\"\n","\n","# All tools the PM agent can use\n","pm_tools = [\n","    Tool(\n","        name=\"create_new_task\",\n","        func=create_new_task_tool,\n","        description=\"Use this first to create a new task and get its ID.\",\n","        args_schema=CreateTaskArgs\n","    ),\n","    Tool(\n","        name=\"assign_priority_to_task\",\n","        func=assign_priority_to_task_tool,\n","        description=\"Use this to assign a priority to a task after it has been created.\",\n","        args_schema=PriorityArgs\n","    ),\n","    Tool(\n","        name=\"assign_task_to_worker\",\n","        func=assign_task_to_worker_tool,\n","        description=\"Use this to assign a task to a specific worker after it has been created.\",\n","        args_schema=AssignWorkerArgs\n","    ),\n","    Tool(\n","        name=\"list_all_tasks\",\n","        func=task_manager.list_all_tasks,\n","        description=\"Use this to list all current tasks and their status.\"\n","    ),\n","]\n","\n","# --- 3. Project Manager Agent Definition ---\n","\n","pm_prompt_template = ChatPromptTemplate.from_messages([\n","    (\"system\", \"\"\"You are a focused Project Manager LLM agent. Your goal is to manage project tasks efficiently.\n","\n","    When you receive a new task request, follow these steps:\n","    1.  First, create the task with the given description using the `create_new_task` tool. You must do this first to get a `task_id`.\n","    2.  Next, analyze the user's request to see if a priority or an assignee is mentioned.\n","        - If a priority is mentioned (e.g., \"urgent\", \"ASAP\", \"critical\"), map it to P0. Use `assign_priority_to_task`.\n","        - If a worker is mentioned, use `assign_task_to_worker`.\n","    3.  If any information (priority, assignee) is missing, you must make a reasonable default assignment (e.g., assign P1 priority and assign to 'Worker A').\n","    4.  Once the task is fully processed, use `list_all_tasks` to show the final state.\n","\n","    Available workers: 'Worker A', 'Worker B', 'Review Team'\n","    Priority levels: P0 (highest), P1 (medium), P2 (lowest)\n","    \"\"\"),\n","    (\"placeholder\", \"{chat_history}\"),\n","    (\"human\", \"{input}\"),\n","    (\"placeholder\", \"{agent_scratchpad}\")\n","])\n","\n","# Create the agent executor\n","pm_agent = create_react_agent(llm, pm_tools, pm_prompt_template)\n","pm_agent_executor = AgentExecutor(\n","    agent=pm_agent,\n","    tools=pm_tools,\n","    verbose=True,\n","    handle_parsing_errors=True,\n","    memory=ConversationBufferMemory(memory_key=\"chat_history\", return_messages=True)\n",")\n","\n","# --- 4. Simple Interaction Flow ---\n","\n","async def run_simulation():\n","    print(\"--- Project Manager Simulation ---\")\n","\n","    # Scenario 1: Handle a new, urgent feature request\n","    print(\"\\n[User Request] I need a new login system implemented ASAP. It should be assigned to Worker B.\")\n","    await pm_agent_executor.ainvoke({\"input\": \"Create a task to implement a new login system. It's urgent and should be assigned to Worker B.\"})\n","\n","    print(\"\\n\" + \"-\"*60 + \"\\n\")\n","\n","    # Scenario 2: Handle a less urgent content update with fewer details\n","    print(\"[User Request] We need to review the marketing website content.\")\n","    await pm_agent_executor.ainvoke({\"input\": \"Manage a new task: Review marketing website content.\"})\n","\n","    print(\"\\n--- Simulation Complete ---\")\n","\n","# Run the simulation\n","if __name__ == \"__main__\":\n","    asyncio.run(run_simulation())"]}]}