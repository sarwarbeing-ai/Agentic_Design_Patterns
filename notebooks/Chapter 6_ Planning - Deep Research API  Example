{"cells":[{"cell_type":"code","source":["from openai import OpenAI\n","\n","# Initialize the client with your API key\n","client = OpenAI(api_key=\"YOUR_OPENAI_API_KEY\")\n","\n","# Define the agent's role and the user's research question\n","system_message = \"\"\"You are a professional researcher preparing a structured, data-driven report.\n","Focus on data-rich insights, use reliable sources, and include inline citations.\"\"\"\n","user_query = \"Research the economic impact of semaglutide on global healthcare systems.\"\n","\n","# Create the Deep Research API call\n","response = client.responses.create(\n","  model=\"o3-deep-research-2025-06-26\",\n","  input=[\n","    {\n","      \"role\": \"developer\",\n","      \"content\": [{\"type\": \"input_text\", \"text\": system_message}]\n","    },\n","    {\n","      \"role\": \"user\",\n","      \"content\": [{\"type\": \"input_text\", \"text\": user_query}]\n","    }\n","  ],\n","  reasoning={\"summary\": \"auto\"},\n","  tools=[{\"type\": \"web_search_preview\"}]\n",")\n","\n","# Access and print the final report from the response\n","final_report = response.output[-1].content[0].text\n","print(final_report)\n","\n","# --- ACCESS INLINE CITATIONS AND METADATA ---\n","print(\"--- CITATIONS ---\")\n","annotations = response.output[-1].content[0].annotations\n","\n","if not annotations:\n","    print(\"No annotations found in the report.\")\n","else:\n","    for i, citation in enumerate(annotations):\n","        # The text span the citation refers to\n","        cited_text = final_report[citation.start_index:citation.end_index]\n","\n","        print(f\"Citation {i+1}:\")\n","        print(f\"  Cited Text: {cited_text}\")\n","        print(f\"  Title: {citation.title}\")\n","        print(f\"  URL: {citation.url}\")\n","        print(f\"  Location: chars {citation.start_index}â€“{citation.end_index}\")\n","print(\"\\n\" + \"=\"*50 + \"\\n\")\n","\n","\n","# --- INSPECT INTERMEDIATE STEPS ---\n","print(\"--- INTERMEDIATE STEPS ---\")\n","\n","# 1. Reasoning Steps: Internal plans and summaries generated by the model.\n","try:\n","    reasoning_step = next(item for item in response.output if item.type == \"reasoning\")\n","    print(\"\\n[Found a Reasoning Step]\")\n","    for summary_part in reasoning_step.summary:\n","        print(f\"  - {summary_part.text}\")\n","except StopIteration:\n","    print(\"\\nNo reasoning steps found.\")\n","\n","# 2. Web Search Calls: The exact search queries the agent executed.\n","try:\n","    search_step = next(item for item in response.output if item.type == \"web_search_call\")\n","    print(\"\\n[Found a Web Search Call]\")\n","    print(f\"  Query Executed: '{search_step.action['query']}'\")\n","    print(f\"  Status: {search_step.status}\")\n","except StopIteration:\n","    print(\"\\nNo web search steps found.\")\n","\n","# 3. Code Execution: Any code run by the agent using the code interpreter.\n","try:\n","    code_step = next(item for item in response.output if item.type == \"code_interpreter_call\")\n","    print(\"\\n[Found a Code Execution Step]\")\n","    print(\"  Code Input:\")\n","    print(f\"  ```python\\n{code_step.input}\\n  ```\")\n","    print(\"  Code Output:\")\n","    print(f\"  {code_step.output}\")\n","except StopIteration:\n","    print(\"\\nNo code execution steps found.\")"],"outputs":[{"output_type":"error","ename":"AuthenticationError","evalue":"Error code: 401 - {'error': {'message': 'Incorrect API key provided: YOUR_OPE*******_KEY. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAuthenticationError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3-1114959760.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Create the Deep Research API call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m response = client.responses.create(\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"o3-deep-research-2025-06-26\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   input=[\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/openai/resources/responses/responses.py\u001b[0m in \u001b[0;36mcreate\u001b[0;34m(self, background, include, input, instructions, max_output_tokens, metadata, model, parallel_tool_calls, previous_response_id, prompt, reasoning, service_tier, store, stream, temperature, text, tool_choice, tools, top_p, truncation, user, extra_headers, extra_query, extra_body, timeout)\u001b[0m\n\u001b[1;32m    698\u001b[0m         \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mhttpx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTimeout\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mNotGiven\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNOT_GIVEN\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    699\u001b[0m     ) -> Response | Stream[ResponseStreamEvent]:\n\u001b[0;32m--> 700\u001b[0;31m         return self._post(\n\u001b[0m\u001b[1;32m    701\u001b[0m             \u001b[0;34m\"/responses\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    702\u001b[0m             body=maybe_transform(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/openai/_base_client.py\u001b[0m in \u001b[0;36mpost\u001b[0;34m(self, path, cast_to, body, options, files, stream, stream_cls)\u001b[0m\n\u001b[1;32m   1247\u001b[0m             \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"post\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mto_httpx_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1248\u001b[0m         )\n\u001b[0;32m-> 1249\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mResponseT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcast_to\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstream\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstream_cls\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstream_cls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1251\u001b[0m     def patch(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/openai/_base_client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, cast_to, options, stream, stream_cls)\u001b[0m\n\u001b[1;32m   1035\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m                 \u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Re-raising status error\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1037\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_status_error_from_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1038\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1039\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAuthenticationError\u001b[0m: Error code: 401 - {'error': {'message': 'Incorrect API key provided: YOUR_OPE*******_KEY. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}"]}],"execution_count":3,"metadata":{"id":"LaUjXoj0Aax5","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"error","timestamp":1751006416202,"user_tz":-120,"elapsed":288,"user":{"displayName":"Antonio Gulli","userId":"17769953396342459304"}},"outputId":"f777e959-59e1-43b5-9fac-359195a21598"}},{"cell_type":"code","source":[],"metadata":{"id":"JoHGBftBHNn2"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"13U0RT0sARKFH7mlpy21sd8yWVtDFtKYD","timestamp":1751006283306}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}